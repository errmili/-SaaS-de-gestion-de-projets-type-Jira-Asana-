# ==========================================
# docker-compose.yml - Configuration Production
# ==========================================
version: '3.8'

services:
  # ===========================================
  # DATABASE SERVICES
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: saas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: saas_project_db_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-root}
      POSTGRES_MULTIPLE_EXTENSIONS: pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d saas_project_db_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: saas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # MICROSERVICES
  # ===========================================
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: saas-auth-service
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - JWT_SECRET=${JWT_SECRET:-mySecretKey12345678901234567890123456789012345678901234567890}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - saas-network
    volumes:
      - auth_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  project-service:
    build:
      context: ./project-service
      dockerfile: Dockerfile
    container_name: saas-project-service
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    networks:
      - saas-network
    volumes:
      - project_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  file-service:
    build:
      context: ./file-service
      dockerfile: Dockerfile
    container_name: saas-file-service
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - MAX_FILE_SIZE=50MB
      - UPLOAD_PATH=/app/temp-storage
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8083:8083"
    networks:
      - saas-network
    volumes:
      - file_storage:/app/temp-storage
      - file_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: saas-analytics-service
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - PROJECT_SERVICE_URL=http://project-service:8082
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      project-service:
        condition: service_healthy
    ports:
      - "8085:8085"
    networks:
      - saas-network
    volumes:
      - analytics_reports:/app/reports
      - analytics_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: saas-notification-service
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USERNAME=postgres
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "8084:8084"
    networks:
      - saas-network
    volumes:
      - notification_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===========================================
  # REVERSE PROXY & LOAD BALANCER
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: saas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - auth-service
      - project-service
      - file-service
      - analytics-service
      - notification-service
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MONITORING & OBSERVABILITY
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: saas-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - saas-network

  grafana:
    image: grafana/grafana:latest
    container_name: saas-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - saas-network

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  file_storage:
    driver: local
  analytics_reports:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  # Logs volumes
  auth_logs:
    driver: local
  project_logs:
    driver: local
  file_logs:
    driver: local
  analytics_logs:
    driver: local
  notification_logs:
    driver: local
  nginx_logs:
    driver: local

# ===========================================
# NETWORKS
# ===========================================
networks:
  saas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16