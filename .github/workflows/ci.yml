# ==========================================
# SaaS CI - Version Simple (basée sur cinéma)
# Fichier: .github/workflows/ci.yml
# ==========================================

name: SaaS CI - Build Simple

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # =================== JOB UNIQUE: BUILD SIMPLE ===================
  build-compile:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code
      - name: 📥 Récupérer le code
        uses: actions/checkout@v3

      # Étape 2: Installer Java 17
      - name: ☕ Installer Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Étape 3: Cache Maven
      - name: 📦 Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      # Étape 4: Build chaque service UN PAR UN
      - name: 🔨 Build Auth Service
        run: |
          echo "🚀 Build du Auth Service..."
          cd auth-service
          mvn clean compile
          mvn test -DskipTests=false
          echo "✅ Auth Service compilé et testé!"

      - name: 🔨 Build Project Service
        run: |
          echo "🚀 Build du Project Service..."
          cd project-service
          mvn clean compile  
          mvn test -DskipTests=false
          echo "✅ Project Service compilé et testé!"

      - name: 🔨 Build File Service
        run: |
          echo "🚀 Build du File Service..."
          cd file-service
          mvn clean compile
          mvn test -DskipTests=false
          echo "✅ File Service compilé et testé!"

      - name: 🔨 Build Notification Service
        run: |
          echo "🚀 Build du Notification Service..."
          cd notification-service
          mvn clean compile
          mvn test -DskipTests=false
          echo "✅ Notification Service compilé et testé!"

      - name: 🔨 Build Analytics Service
        run: |
          echo "🚀 Build du Analytics Service..."
          cd analytics-service
          mvn clean compile
          mvn test -DskipTests=false
          echo "✅ Analytics Service compilé et testé!"

      # Étape 5: Message de fin
      - name: 🎉 Build terminé
        run: |
          echo "🎉 Tous les services SaaS ont été compilés avec succès!"
          echo "🚀 Ton architecture microservices SaaS est prête!"

      # =================== ÉTAPE 2: BUILD DOCKER IMAGES ===================
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Auth Service
        run: |
          echo "🐳 Build Docker Auth Service..."
          cd auth-service
          if [ ! -f Dockerfile ]; then
            echo "Création Dockerfile basique..."
            cat > Dockerfile << 'EOF'
          FROM openjdk:17-jre-slim
          WORKDIR /app  
          COPY target/*.jar app.jar
          EXPOSE 8081
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF
          fi
          mvn clean package -DskipTests=true
          docker build -t saas-auth-service:latest .
          echo "✅ Docker Auth Service créé!"

      - name: 🏗️ Build Docker Project Service
        run: |
          echo "🐳 Build Docker Project Service..."
          cd project-service
          if [ ! -f Dockerfile ]; then
            echo "Création Dockerfile basique..."
            cat > Dockerfile << 'EOF'
          FROM openjdk:17-jre-slim
          WORKDIR /app
          COPY target/*.jar app.jar  
          EXPOSE 8082
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF
          fi
          mvn clean package -DskipTests=true
          docker build -t saas-project-service:latest .
          echo "✅ Docker Project Service créé!"

      - name: 🏗️ Build Docker File Service
        run: |
          echo "🐳 Build Docker File Service..."
          cd file-service
          if [ ! -f Dockerfile ]; then
            echo "Création Dockerfile basique..."  
            cat > Dockerfile << 'EOF'
          FROM openjdk:17-jre-slim
          WORKDIR /app
          COPY target/*.jar app.jar
          EXPOSE 8083  
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF
          fi
          mvn clean package -DskipTests=true
          docker build -t saas-file-service:latest .
          echo "✅ Docker File Service créé!"

      - name: 🏗️ Build Docker Notification Service
        run: |
          echo "🐳 Build Docker Notification Service..."
          cd notification-service  
          if [ ! -f Dockerfile ]; then
            echo "Création Dockerfile basique..."
            cat > Dockerfile << 'EOF'
          FROM openjdk:17-jre-slim
          WORKDIR /app
          COPY target/*.jar app.jar
          EXPOSE 8084
          ENTRYPOINT ["java", "-jar", "app.jar"] 
          EOF
          fi
          mvn clean package -DskipTests=true
          docker build -t saas-notification-service:latest .
          echo "✅ Docker Notification Service créé!"

      # =================== ÉTAPE 3: SCAN SÉCURITÉ ===================
      - name: 🔒 Scan Sécurité Basique
        run: |
          echo "🔍 Scan de sécurité des fichiers..."
          
          # Recherche fichiers sensibles
          echo "Recherche de fichiers sensibles..."
          find . -name "*.key" -o -name "*.pem" -o -name "*password*" -o -name ".env" -not -path "./.git/*" | head -10 || echo "Aucun fichier sensible détecté"
          
          # Vérification des ports exposés
          echo "Vérification des ports dans les Dockerfiles..."
          grep -r "EXPOSE" . --include="Dockerfile*" || echo "Ports Docker vérifiés"
          
          # Vérification secrets en dur  
          echo "Recherche de secrets potentiels..."
          grep -r -i "password\|secret\|key" . --include="*.yml" --include="*.properties" | grep -v "placeholder\|example\|template" | head -5 || echo "Pas de secrets hardcodés détectés"
          
          echo "✅ Scan sécurité basique terminé!"

      # =================== MESSAGE FINAL ===================
      - name: 🎉 Pipeline CI Complet
        run: |
          echo "🚀 PIPELINE CI SAAS COMPLET RÉUSSI !"
          echo "✅ Compilation des 5 services"
          echo "✅ Tests unitaires"  
          echo "✅ Build Docker des images"
          echo "✅ Scan sécurité basique"
          echo "👉 Prêt pour déploiement staging/production !"