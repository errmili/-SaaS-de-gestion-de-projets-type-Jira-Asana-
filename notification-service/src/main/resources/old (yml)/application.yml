server:
  port: 8084

spring:
  application:
    name: notification-service

  # Configuration base de données (même pattern que tes autres services)
  datasource:
    url: jdbc:postgresql://localhost:5432/saas_project_db_dev?currentSchema=notification_db
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:root}
    driver-class-name: org.postgresql.Driver

    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000

  # Configuration JPA (même pattern que project-service)
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        default_schema: notification_db
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Configuration Flyway (CORRIGÉE - notification_db au lieu de auth_db)
  flyway:
    enabled: true
    locations: classpath:db/migration
    user: postgres
    password: root
    schemas: notification_db
    default-schema: notification_db
    clean-disabled: false

  # Configuration Kafka (gardée identique à ton exemple qui marche)
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notification-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  # Configuration Mail (inspirée de ton autre projet)
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:jadcanada11@gmail.com}
    password: ${MAIL_PASSWORD:your-app-password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          trust: "*"
        connectiontimeout: 5000
        timeout: 3000
        writetimeout: 5000

  # Configuration Redis
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms

# Configuration logging (même pattern que tes autres services)
logging:
  level:
    com.projectsaas.notification: DEBUG
    org.springframework.kafka: INFO
    org.flywaydb: DEBUG
    org.springframework.mail: INFO
    org.hibernate.SQL: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Configuration notification
notification:
  websocket:
    endpoint: /ws
    allowed-origins: "*"
  email:
    from: ${MAIL_FROM:noreply@projectsaas.com}
    templates:
      base-path: classpath:templates/email/

# Configuration monitoring (même pattern que tes autres services)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always